Summary
This program takes in a “sets.ser” file, which is a serialized form of the InfoSet array generated in the DataProcessor program. 
The program deserializes this file into an InfoSet array, where it handles IOExceptions and ClassNotFoundExceptions. 
Assuming there are no issues, the program then welcomes the user and asks what questions they have about Representative Hixon. 
The program then starts an infinite loop. At the beginning of the loop, the program takes a string from the user’s input. 
It checks if the input’s Levenshtein distance is less than or equal to 2 for both “quit” and “q”, and if it is then the program prints “Goodbye” and breaks the loop. 
Otherwise, the string is passed into the queryCompare method. 
It first loops through the array of valid queries and finds the closest one to the utterance within the threshold (distance is <= 7). 
If there is one within that threshold, it returns the one with the smallest distance. 
Otherwise, it then checks each word of the utterance against each word of each query. 
Per query, it counts the number of close matches and then divides that by the length of the query. 
If that double is within a threshold, it updates the query to be returned. 
If a query is found within the threshold, then the closest matching query is returned. Otherwise, the string “invalid query” is returned. 
Going back to the main method, the program then has different behavior if “invalid inquiry” is or not returned. 
If it is, the user is told that their query was not understood and they can input another query. 
If not, then the program prints what kind of information the query is requesting and then prints that information. 
After either of these outcomes, the user then inputs another query. 
This repeats until the user inputs a query close to “quit” or “q”
